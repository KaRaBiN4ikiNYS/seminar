#include <iostream>
#include <vector>

using namespace std;

class Box {
protected:
    float* data;
public:
    Box() {
        data = new float(0);
    }

    Box(float* data) : data(data) {}

    virtual void print() {
        cout << "Box" << endl;
    }

    virtual ~Box() {
        delete data;
    }
};

class Crate : public Box {
private:
    int value;
public:
    Crate() : Box() {
        value = 0;
    }

    Crate(float* data, int value) : Box(data), value(value) {}

    void print() override {
        cout << "Crate" << endl;
    }

    ~Crate() override {
        // не забываем освободить ресурсы
    }
};

void fill(vector<Box*>& v) {
    for (int i = 0; i < 6; i++) {
        if (i % 2 == 0) {
            v.push_back(new Box());
        } else {
            float* data = new float(i / 2.0);
            v.push_back(new Crate(data, i));
        }
    }
}

int main() {
    vector<Box*> Wagon;
    vector<Box*> Lorry;

    fill(Wagon);

    for (int i = 0; i < Wagon.size() / 2; i++) {
        Lorry.push_back(Wagon[i]);
    }

    cout << "Wagon contents:" << endl;
    for (Box* b : Wagon) {
        b->print();
    }

    cout << "Lorry contents:" << endl;
    for (Box* b : Lorry) {
        b->print();
    }

    // освобождение ресурсов
    for (Box* b : Wagon) {
        delete b;
    }

    for (Box* b : Lorry) {
        delete b;
    }

    return 0;
}
